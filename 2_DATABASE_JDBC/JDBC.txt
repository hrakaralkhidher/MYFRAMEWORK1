What is JDBC?
Java Database connectivity
--JDBC comes with JDK(Java Development Kit), work with RDMS(Relational Data Management System)
--it has set of interfaces and classes to work with an RDMS
How JDBC work?
JDBC offers programming level interface that handles mechanic of Java applications that communicating with database or RDMS
 JDBC consists of two layers;
 1-) JDBC API
 2-) JDBC DRIVER
 JDBC API supports communication between the Java application and JDBC manager
 JDBC driver supports communication between JDBC manager and Database driver
 JDBC is the API that your application interacts with

 JAVA APP <----------------JDBC----------->Actual Database
 JDBC does not provide actual implementation
 Each RDMS(like Oracle, MySQL, PostGresss) will provide actual implementation that is known as a driver

 We use maven dependency to import that driver
<!-- https://mvnrepository.com/artifact/com.oracle.database.jdbc/ojdbc8 -->
<dependency>
    <groupId>com.oracle.database.jdbc</groupId>
    <artifactId>ojdbc8</artifactId>
    <version>21.1.0.0</version>
</dependency>
JDBC has DriverManager class to manage connection to the URL,username,password
URL: !(you'll be given this information)
jdbc:oracle:thin:@IP_Address:PORT:SID
jdbc:oracle:thin:@class-db.ctigbjf2wamf.us-east-1.rds.amazonaws.com:1521:oracle
jdbc -> connection that using java
oracle -> database vendor, RDMS
thin -> one type oracle driver
IP Address -> Hostname or IP
1521 -> Port is used to connect database
SID-> SID for unique identifier for your oracle db
3 important interfaces for JDBC
1-) Connection(STEP 1)
this interface represents the connection with a specific database
SQL statement are executed in the context of connection
Driver will look for url, username, password that you provide
Connection connection = DriverManager.getConnection(url,username,password)
2-) Statement (Step 2)
this interface represents a static sql statement
Using the statement object abd it's methods, you can execute sql statement and get the result of it;

There are two ways to create statement object
a-) default statement will be able to only move forward in ResultSet
b-) this will be used to create ResultSet that can move freely
 Statement statement = connection.createStatement();

 3-) ResultSet(Step 3)
 ResultSet will store the query result (The query that you want to run)
 ResultSet resultset = statement.executeQuery('Select * from employees')

 *******CONNECTION,STATEMENT,RESULTSET  are the all resources need to be closed after usage****

 4-) Close the connection(Step 4)
 you'll close the methods at the end of code
 connection.close();
 statement.close();
 resultset.close();


